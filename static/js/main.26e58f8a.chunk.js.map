{"version":3,"sources":["logo.svg","components/encounter.js","components/table.js","App.js","reportWebVitals.js","db.js","index.js"],"names":["Encounter","props","console","log","load","bind","state","style","alignItems","justifyContent","color","this","db","getOrAdd","title","result","setState","prevState","time","save","TableRow","TableCell","align","width","Box","src","sprite","encounter","level","location","toLocaleTimeString","timeZone","onClick","e","setEncounterTime","React","Component","NuzlockeTable","data","Date","timerChangeEvent","autosave","index","newData","battleencounters","component","Paper","textAlign","sx","debug","auto","onTimerChange","Typography","variant","TableContainer","TableBody","map","sprites","find","x","name","opponent","url","key","App","className","window","dbService","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","successCallback","dbRequest","serverData","fetch","json","indexedDB","open","onerror","event","alert","onupgradeneeded","target","createObjectStore","keyPath","onsuccess","error","message","loadInitial","games","filter","game","default","path","dbResult","store","getReq","transaction","objectStore","get","add","value","put","saveToDB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26e58f8a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {\r\n    TableBody,\r\n    TableContainer,\r\n    TableRow,\r\n    Paper,\r\n    TableCell,\r\n    Box,\r\n    Button,\r\n    Typography,\r\n} from '@material-ui/core'\r\nimport AddBoxIcon from '@material-ui/icons/AddBox'\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft'\r\nimport React from 'react'\r\n\r\nclass Encounter extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        console.log('Debug: New encounter component created:')\r\n        console.log(props);\r\n\r\n        this.load = this.load.bind(this);\r\n\r\n        this.state = {\r\n            style: {\r\n                alignItems: 'center',\r\n                justifyContent: 'space-evenly',\r\n                'text-align': 'center',\r\n                color: 'red',\r\n                'vertical-align': 'middle'\r\n            }\r\n        }\r\n    }\r\n\r\n    load() {\r\n        debugger;\r\n        this.props.db.getOrAdd(\r\n            this.props?.db?.db,\r\n            this.props?.title,\r\n            'encounters',\r\n            {\r\n                \"title\": this.props?.title,\r\n                \"time\": null //props holds the reference to the timer time.\r\n            },\r\n            (result) => {\r\n                console.log('Updating encounter state...')\r\n                debugger;\r\n\r\n                this.setState((prevState) => ({\r\n                    \"title\": this.props.title,\r\n                    \"time\": result?.time\r\n                    //props holds the reference to the timer time.\r\n                }))\r\n            }\r\n        )\r\n    }\r\n\r\n    setEncounterTime(time) {\r\n        this.props.db.save(\r\n            'encounters',\r\n            {\r\n                \"title\": this.props.title,\r\n                \"time\": time //props holds the reference to the timer time.\r\n            });\r\n\r\n        this.load();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.load();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <TableRow>\r\n                <TableCell align=\"center\" width=\"30%\">\r\n                    <Box>\r\n                        <img\r\n                            src={this.props.sprite + ''}\r\n                        ></img>\r\n                        {this.props.encounter.title}\r\n                    </Box>\r\n                </TableCell>\r\n                <TableCell width=\"30%\" align=\"center\">\r\n                    <b>Level {this.props.encounter.level}</b>\r\n                    {this.props.encounter?.location ?\r\n                        <>\r\n                            <br /> {this.props.encounter.location}\r\n                        </>\r\n                        : ''}\r\n                </TableCell>\r\n                <TableCell width=\"40%\">\r\n                    {typeof this.state?.time?.toLocaleTimeString == 'function'\r\n                        ? this.state?.time.toLocaleTimeString('en-GB', {\r\n                            timeZone: 'UTC',\r\n                        })\r\n                        : '--:--:--'}\r\n                </TableCell>\r\n                <TableCell>\r\n                    {this.state?.time > 0 ? (\r\n                        <RotateLeftIcon\r\n                            onClick={(e) => this.setEncounterTime(null)}\r\n                        />\r\n                    ) : (\r\n                        <AddBoxIcon\r\n                            onClick={(e) => this.setEncounterTime(this.props.time)}\r\n                        />\r\n                    )}\r\n                </TableCell>\r\n            </TableRow>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Encounter;","import {\r\n  TableBody,\r\n  TableContainer,\r\n  TableRow,\r\n  Paper,\r\n  TableCell,\r\n  Box,\r\n  Button,\r\n  Typography,\r\n} from '@material-ui/core'\r\nimport React from 'react'\r\nimport { Clock } from 'small-react-timer'\r\nimport Encounter from './encounter'\r\n\r\nclass NuzlockeTable extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      time: this.props.data.time || new Date(0),\r\n      style: {\r\n        alignItems: 'center',\r\n        justifyContent: 'space-evenly',\r\n        'vertical-align': 'middle'\r\n      },\r\n    }\r\n\r\n    console.log('Debug: NuzlockeTable created with props:')\r\n    console.log(props)\r\n\r\n    this.timerChangeEvent = this.timerChangeEvent.bind(this)\r\n  }\r\n\r\n  timerChangeEvent(time) {\r\n    this.setState((prevState) => ({\r\n      time: time\r\n    }))\r\n\r\n    if (this.props.autosave) {\r\n      this.props.db.save('games', {\r\n        title: this.props.data.title,\r\n        time: this.state.time})\r\n    }\r\n  }\r\n\r\n  resetEncounterTime(index) {\r\n    let newData = this.state.data\r\n    newData.battleencounters[index].time = null\r\n\r\n    this.setState((prevState) => ({\r\n      data: newData,\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Box component={Paper} textAlign=\"center\" sx={this.state.style}>\r\n        <Clock\r\n          debug={false}\r\n          auto={true}\r\n          onTimerChange={this.timerChangeEvent}\r\n          time={this.state.time}\r\n        ></Clock>\r\n        <Typography variant=\"h4\">{this.props.data.title}</Typography>\r\n        <TableContainer component={Paper}>\r\n          <table>\r\n            <TableBody>\r\n              {this.props.data?.battleencounters?.map((encounter, index) => {\r\n                var sprite = this.props.data.sprites.find((x) => x.name == encounter.opponent).url;\r\n                var key = this.props.data.title + '_' + encounter.title;\r\n                \r\n                return <Encounter db={this.props.db} key={key} title={key} sprite={sprite} encounter={encounter} time={this.state.time} /> //God I hope the time is an object reference.\r\n              })}\r\n            </TableBody>\r\n          </table>\r\n        </TableContainer>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NuzlockeTable\r\n","import logo from './logo.svg'\r\nimport './App.css'\r\nimport NuzlockeTable from './components/table'\r\n\r\nfunction App(props) {\r\n  console.log('Debug: Initial data object:')\r\n  console.log(props.data)\r\n\r\n  return (\r\n    <header className=\"App-header\">\r\n      <NuzlockeTable db={window.dbService} data={props.data} autosave={true}></NuzlockeTable>\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","class dbService {\r\n  constructor(successCallback) {\r\n    //Class Properties\r\n    this.successCallback = successCallback\r\n    this.db = null\r\n    this.dbRequest = null\r\n    this.serverData = null\r\n\r\n    //As promises, .then is executed in the scope of this instance of the class, so no need to bind the functions.\r\n    fetch('data/games.json')\r\n      .then((result) => result.json())\r\n      .then((result) => {\r\n        this.serverData = result\r\n\r\n        //Local Storage Setup\r\n        this.dbRequest = window.indexedDB.open('nuzlocketracker')\r\n        this.dbRequest.onerror = function (event) {\r\n          alert(\r\n            'You have not given this page the required permissions to save local state. This page will not work correctly.',\r\n          )\r\n        }.bind(this) //Because this is set as a callback function we need to bind it to this instance of the dbService\r\n\r\n        //onupgradeneeded is fired if we have a newer version # of the database or if we have no existing database (version 1 is greater than version _null_)\r\n        this.dbRequest.onupgradeneeded = function (event) {\r\n          console.log('Database debug: Upgrade needed...')\r\n\r\n          this.db = event.target.result\r\n\r\n          //Make a new object store for storing our data about the games. Title of the game is the key.\r\n          this.db.createObjectStore('games', {\r\n            keyPath: 'title',\r\n          })\r\n\r\n          //Make a new object store for storing our data about the encounters. Title of the game is the key.\r\n          this.db.createObjectStore('encounters', {\r\n            keyPath: 'title',\r\n          })\r\n\r\n          //Make a new object store for storing our data about the routes. Title of the game is the key.\r\n          this.db.createObjectStore('locations', {\r\n            keyPath: 'title',\r\n          })\r\n        }.bind(this) //Because this is set as a callback function we need to bind it to this instance of the dbService\r\n\r\n        this.dbRequest.onsuccess = function (event) {\r\n          console.log('Database debug: Initial database request succeeded...')\r\n          this.db = event.target.result\r\n\r\n          //Generic error handler\r\n          this.db.onerror = function (event) {\r\n            console.log('Database error: ' + event.target.error.message)\r\n          }\r\n\r\n          this.loadInitial(successCallback)\r\n        }.bind(this) //Because this is set as a callback function we need to bind it to this instance of the dbService\r\n      })\r\n  }\r\n\r\n  loadInitial(successCallback) {\r\n    //Load the game metadata as we don't store that client-side\r\n    fetch(this.serverData.games.filter((game) => game.name == this.serverData.default)[0].path)\r\n      .then((result) => result.json())\r\n      .then((result) => {\r\n        this.getOrAdd(\r\n          this.db,\r\n          this.serverData?.default,\r\n          'games',\r\n          {title: result.title,\r\n          time: null},\r\n          (dbResult) => {\r\n            result.time = dbResult?.time;\r\n            successCallback?.(result)\r\n          }\r\n        )\r\n      })\r\n  }\r\n\r\n  /// Get or add for the indexed db, key is the game title,\r\n  /// source is the location where this service can perform an HTTP request to get the JSON data of a game.\r\n  /// Returns a promise for the db request.\r\n  getOrAdd(db, key, store, data, successCallback) {\r\n    //Get the first game to load in to the nuzlocke table.\r\n    var getReq = db\r\n      .transaction(store, 'readonly')\r\n      .objectStore(store)\r\n      .get(key)\r\n\r\n    getReq.onsuccess = function (event) {\r\n      //will be null if no games\r\n      if (event.target.result) {\r\n        successCallback?.(event.target.result)\r\n      } else {\r\n        db.transaction(store, 'readwrite')\r\n          .objectStore(store)\r\n          .add(data)\r\n        successCallback?.()\r\n      }\r\n    }.bind(this) //Because this is set as a callback function we need to bind it to this instance of the dbService\r\n\r\n    return getReq.onsuccess;\r\n  }\r\n\r\n  ///Generic Save\r\n  ///Key is optional if a keypath is being used\r\n  saveToDB(db, store, value, key) {\r\n    db.transaction(store, 'readwrite').objectStore(store).put(value, key)\r\n  }\r\n\r\n  ///Instance specific save\r\n  ///Key is optional if a keypath is being used\r\n  save(store, value, key) {\r\n    this.saveToDB(this.db, store, value, key)\r\n  }\r\n}\r\n\r\nexport default function (callback) {\r\n  return new dbService(callback)\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport dbInit from './db';\r\n\r\nwindow.dbService = dbInit(function(data) {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <App data={data}/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n  )\r\n\r\n  // If you want to start measuring performance in your app, pass a function\r\n  // to log results (for example: reportWebVitals(console.log))\r\n  // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n  reportWebVitals()\r\n})\r\n"],"sourceRoot":""}